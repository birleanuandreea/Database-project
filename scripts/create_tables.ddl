-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-12-18 12:16:24 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE autor (
    id_autor      NUMBER(3) NOT NULL,
    nume          VARCHAR2(50) NOT NULL,
    nationalitate VARCHAR2(15)
)
LOGGING;

ALTER TABLE autor
    ADD CONSTRAINT autor_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                       '([A-Z]+[a-z]+)( [A-Z]+[a-z]+)*' ) );

ALTER TABLE autor
    ADD CONSTRAINT autor_nationalitate_ck CHECK ( REGEXP_LIKE ( nationalitate,
                                                                '([A-Z]+[a-z]+)( [A-Z]+[a-z]+)*' ) );

ALTER TABLE autor ADD CONSTRAINT autor_pk PRIMARY KEY ( id_autor );

CREATE TABLE carte (
    id_carte   NUMBER(3) NOT NULL,
    titlu      VARCHAR2(40) NOT NULL,
    gen        VARCHAR2(20) NOT NULL,
    id_editura NUMBER(2) NOT NULL,
    id_autor   NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE carte
    ADD CONSTRAINT carte_titlu_ck CHECK ( REGEXP_LIKE ( titlu,
                                                        '([A-Z][a-z]+)( [A-Za-z]+)*' ) );

ALTER TABLE carte
    ADD CONSTRAINT carte_gen_ck CHECK ( gen IN ( 'Aventura', 'Dezvoltare personala', 'Istorie', 'Literatura clasica', 'Mister/Politist'
    ,
                                                 'Roman de dragoste' ) );

ALTER TABLE carte ADD CONSTRAINT carte_pk PRIMARY KEY ( id_carte );

ALTER TABLE carte ADD CONSTRAINT carte_titlu_un UNIQUE ( titlu );

CREATE TABLE cititor (
    id_cititor NUMBER(4) NOT NULL,
    nume       VARCHAR2(15) NOT NULL,
    prenume    VARCHAR2(40) NOT NULL
)
LOGGING;

ALTER TABLE cititor
    ADD CONSTRAINT cititor_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                         '[A-Z]+[a-z]' ) );

ALTER TABLE cititor
    ADD CONSTRAINT cititor_prenume_ck CHECK ( REGEXP_LIKE ( prenume,
                                                            '([A-Z]+[a-z]+)( [A-Z]+[a-z]+)*' ) );

ALTER TABLE cititor ADD CONSTRAINT cititor_pk PRIMARY KEY ( id_cititor );

CREATE TABLE detalii_carti (
    cantitate    NUMBER(2) NOT NULL,
    limba        VARCHAR2(8) NOT NULL,
    descriere    VARCHAR2(255) NOT NULL,
    an_publicare NUMBER(4),
    id_carte     NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE detalii_carti
    ADD CONSTRAINT detalii_carti_cantitate_ck CHECK ( cantitate BETWEEN 1 AND 20 );

ALTER TABLE detalii_carti
    ADD CONSTRAINT detalii_carti_limba_ck CHECK ( limba IN ( 'engleza', 'franceza', 'germana', 'italiana', 'romana',
                                                             'rusa', 'spaniola' ) );

ALTER TABLE detalii_carti
    ADD CONSTRAINT detalii_carti_an_publicare_ck CHECK ( an_publicare BETWEEN 1900 AND 2024 );

CREATE UNIQUE INDEX detalii_carti__idx ON
    detalii_carti (
        id_carte
    ASC )
        LOGGING;

CREATE TABLE detalii_cititori (
    telefon        CHAR(10) NOT NULL,
    email          VARCHAR2(25),
    data_inscriere DATE DEFAULT sysdate NOT NULL,
    id_cititor     NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE detalii_cititori
    ADD CONSTRAINT detalii_cititori_telefon_ck CHECK ( REGEXP_LIKE ( telefon,
                                                                     '^07[0-9]{8}$' ) );

ALTER TABLE detalii_cititori
    ADD CONSTRAINT detalii_cititori_email_ck CHECK ( REGEXP_LIKE ( email,
                                                                   '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

CREATE UNIQUE INDEX detalii_cititori__idx ON
    detalii_cititori (
        id_cititor
    ASC )
        LOGGING;

ALTER TABLE detalii_cititori ADD CONSTRAINT detalii_cititori_telefon_un UNIQUE ( telefon );

ALTER TABLE detalii_cititori ADD CONSTRAINT detalii_cititori_email_un UNIQUE ( email );

CREATE TABLE editura (
    id_editura NUMBER(2) NOT NULL,
    nume       VARCHAR2(35) NOT NULL,
    adresa     VARCHAR2(50) NOT NULL,
    telefon    VARCHAR2(10) NOT NULL,
    email      VARCHAR2(25)
)
LOGGING;

ALTER TABLE editura
    ADD CONSTRAINT editura_nume_ck CHECK ( REGEXP_LIKE ( nume,
                                                         '([A-Z][a-z]+)( [A-Za-z]+)*' ) );

ALTER TABLE editura
    ADD CONSTRAINT editura_adresa_ck CHECK ( REGEXP_LIKE ( adresa,
                                                           '([A-Z][a-z]+)( [A-Za-z]+)*' ) );

ALTER TABLE editura
    ADD CONSTRAINT editura_telefon_ck CHECK ( REGEXP_LIKE ( telefon,
                                                            '^07[0-9]{8}$' ) );

ALTER TABLE editura
    ADD CONSTRAINT editura_email_ck CHECK ( REGEXP_LIKE ( email,
                                                          '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE editura ADD CONSTRAINT editura_pk PRIMARY KEY ( id_editura );

ALTER TABLE editura ADD CONSTRAINT editura_telefon_un UNIQUE ( telefon );

ALTER TABLE editura ADD CONSTRAINT editura_email_un UNIQUE ( email );

ALTER TABLE editura ADD CONSTRAINT editura_adresa_un UNIQUE ( adresa );

CREATE TABLE fisa_imprumut (
    data_imprumut  DATE DEFAULT sysdate NOT NULL,
    data_returnare DATE,
    id_carte       NUMBER(3) NOT NULL,
    id_cititor     NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE fisa_imprumut ADD CONSTRAINT fisa_impr_data_returnare_ck CHECK ( data_returnare > data_imprumut );

ALTER TABLE fisa_imprumut ADD CONSTRAINT id_carte_id_cititor_uk UNIQUE ( id_carte,
                                                                         id_cititor );



ALTER TABLE carte
    ADD CONSTRAINT carte_autor_fk FOREIGN KEY ( id_autor )
        REFERENCES autor ( id_autor )
    NOT DEFERRABLE;

ALTER TABLE carte
    ADD CONSTRAINT carte_editura_fk FOREIGN KEY ( id_editura )
        REFERENCES editura ( id_editura )
    NOT DEFERRABLE;

ALTER TABLE detalii_carti
    ADD CONSTRAINT detalii_carti_carte_fk FOREIGN KEY ( id_carte )
        REFERENCES carte ( id_carte )
    NOT DEFERRABLE;

ALTER TABLE detalii_cititori
    ADD CONSTRAINT detalii_cititori_cititor_fk FOREIGN KEY ( id_cititor )
        REFERENCES cititor ( id_cititor )
    NOT DEFERRABLE;

ALTER TABLE fisa_imprumut
    ADD CONSTRAINT fisa_imprumut_carte_fk FOREIGN KEY ( id_carte )
        REFERENCES carte ( id_carte )
    NOT DEFERRABLE;

ALTER TABLE fisa_imprumut
    ADD CONSTRAINT fisa_imprumut_cititor_fk FOREIGN KEY ( id_cititor )
        REFERENCES cititor ( id_cititor )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_adunare_cantitate_returnare 
    AFTER INSERT OR UPDATE ON Fisa_imprumut 
    FOR EACH ROW 
BEGIN
    IF :new.data_returnare IS NOT NULL AND :new.id_carte IS NOT NULL THEN
        UPDATE Detalii_carti
        SET cantitate = cantitate + 1
        WHERE id_carte = :new.id_carte;
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Detalii_cititori_data_inscriere 
    BEFORE INSERT ON Detalii_cititori 
    FOR EACH ROW 
BEGIN
    IF( :new.data_inscriere > SYSDATE )
    THEN
        RAISE_APPLICATION_ERROR( -20001,
            'Data invalida: ' || TO_CHAR(:new.data_inscriere, 'DD.MM.YYYY') || 
            ' trebuie sa fie mai mica sau egala cu data curenta' );
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Fisa_imprumut_data_imprumut 
    BEFORE INSERT OR UPDATE ON Fisa_imprumut 
    FOR EACH ROW 
BEGIN
    IF( :new.data_imprumut > SYSDATE )
    THEN
        RAISE_APPLICATION_ERROR( -20001,
            'Data invalida: ' || TO_CHAR(:new.data_imprumut, 'DD.MM.YYYY') || 
            ' trebuie sa fie mai mica sau egala cu data curenta' );
    END IF;
    DECLARE
        v_data_inscriere DATE;
    BEGIN
        SELECT data_inscriere
        INTO v_data_inscriere
        FROM Detalii_cititori
        WHERE id_cititor = :new.id_cititor;

        IF :new.data_imprumut < v_data_inscriere THEN
            RAISE_APPLICATION_ERROR(-20003, 
                'Data imprumut: ' || TO_CHAR(:new.data_imprumut, 'DD.MM.YYYY') || 
                ' trebuie sa fie mai mare decat data de inscriere: ' || 
                TO_CHAR(v_data_inscriere, 'DD.MM.YYYY'));
        END IF;
    END;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Fisa_imprumut_data_returnare 
    BEFORE INSERT OR UPDATE ON Fisa_imprumut 
    FOR EACH ROW 
BEGIN
    IF( :new.data_returnare IS NOT NULL AND :new.data_returnare <= :new.data_imprumut )
    THEN
        RAISE_APPLICATION_ERROR( -20001,
            'Data invalida: ' || TO_CHAR(:new.data_returnare, 'DD.MM.YYYY') || 
            ' trebuie sa fie mai mare decat data de imprumut' );
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_scadere_cantitate_imprumut 
    BEFORE INSERT OR UPDATE ON Fisa_imprumut 
    FOR EACH ROW 
BEGIN
    IF :new.id_carte IS NOT NULL AND :new.data_returnare IS NULL THEN
        UPDATE Detalii_carti
        SET cantitate = cantitate - 1
        WHERE id_carte = :new.id_carte;
    END IF;
END; 
/

CREATE SEQUENCE autor_id_autor_seq START WITH 500 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER autor_id_autor_trg BEFORE
    INSERT ON autor
    FOR EACH ROW
    WHEN ( new.id_autor IS NULL )
BEGIN
    :new.id_autor := autor_id_autor_seq.nextval;
END;
/

CREATE SEQUENCE carte_id_carte_seq START WITH 100 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER carte_id_carte_trg BEFORE
    INSERT ON carte
    FOR EACH ROW
    WHEN ( new.id_carte IS NULL )
BEGIN
    :new.id_carte := carte_id_carte_seq.nextval;
END;
/

CREATE SEQUENCE cititor_id_cititor_seq START WITH 1000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cititor_id_cititor_trg BEFORE
    INSERT ON cititor
    FOR EACH ROW
    WHEN ( new.id_cititor IS NULL )
BEGIN
    :new.id_cititor := cititor_id_cititor_seq.nextval;
END;
/

CREATE SEQUENCE editura_id_editura_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER editura_id_editura_trg BEFORE
    INSERT ON editura
    FOR EACH ROW
    WHEN ( new.id_editura IS NULL )
BEGIN
    :new.id_editura := editura_id_editura_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             7
-- CREATE INDEX                             2
-- ALTER TABLE                             31
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           9
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          4
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
